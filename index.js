// Generated by CoffeeScript 2.0.0-beta3
void function () {
  var Jedediah;
  module.exports = Jedediah = function () {
    function Jedediah(param$, param$1) {
      this.optionArguments = param$;
      if (null == this.optionArguments)
        this.optionArguments = [];
      this.parameterArguments = param$1;
      if (null == this.parameterArguments)
        this.parameterArguments = [];
    }
    Jedediah.prototype.parse = function (argv) {
      var additionalArgs, arg, args, cache$1, longOptionArguments, longParameterArguments, match, o, optionMap, options, opts, positionalArgs, reLongOption, reLongParameter, reShortOptions, reShortOptionsShortParameter, reShortParameter, shortOptionArguments, shortParameterArguments;
      args = argv.slice(1 + (argv[0] === 'node'));
      additionalArgs = [];
      if (in$('--', args))
        additionalArgs = args.splice(args.indexOf('--'), 9e9).slice(1);
      options = {};
      optionMap = {};
      shortOptionArguments = [];
      longOptionArguments = [];
      for (var i$ = 0, length$ = this.optionArguments.length; i$ < length$; ++i$) {
        opts = this.optionArguments[i$];
        options[opts[0][0]] = opts[1];
        for (var i$1 = 0, length$1 = opts[0].length; i$1 < length$1; ++i$1) {
          o = opts[0][i$1];
          optionMap[o] = opts[0][0];
          if (o.length === 1) {
            shortOptionArguments.push(o);
          } else if (o.length > 1) {
            longOptionArguments.push(o);
          }
        }
      }
      shortParameterArguments = [];
      longParameterArguments = [];
      for (var i$2 = 0, length$2 = this.parameterArguments.length; i$2 < length$2; ++i$2) {
        opts = this.parameterArguments[i$2];
        for (var i$3 = 0, length$3 = opts[0].length; i$3 < length$3; ++i$3) {
          o = opts[0][i$3];
          optionMap[o] = opts[0][0];
          if (o.length === 1) {
            shortParameterArguments.push(o);
          } else if (o.length > 1) {
            longParameterArguments.push(o);
          }
        }
      }
      reShortOptions = new RegExp('^-(' + shortOptionArguments.join('|') + ')+$');
      reLongOption = new RegExp('^--(no-)?(' + longOptionArguments.join('|') + ')$');
      reShortParameter = new RegExp('^-(' + shortParameterArguments.join('|') + ')$');
      reLongParameter = new RegExp('^--(' + longParameterArguments.join('|') + ')$');
      reShortOptionsShortParameter = new RegExp('^-(' + shortOptionArguments.join('|') + ')+(' + shortParameterArguments.join('|') + ')$');
      positionalArgs = [];
      while (args.length) {
        arg = args.shift();
        if (reShortOptionsShortParameter.exec(arg)) {
          args.unshift('-' + arg.slice(1, -1), '-' + arg.slice(-1));
        } else if (reShortOptions.exec(arg)) {
          for (var cache$ = arg.slice(1).split(''), i$4 = 0, length$4 = cache$.length; i$4 < length$4; ++i$4) {
            o = cache$[i$4];
            options[optionMap[o]] = true;
          }
        } else if (match = reLongOption.exec(arg)) {
          options[optionMap[match[2]]] = null != match[1] ? false : true;
        } else if (match = (cache$1 = reShortParameter.exec(arg), null != cache$1 ? cache$1 : reLongParameter.exec(arg))) {
          options[optionMap[match[1]]] = args.shift();
        } else if (match = /^(-.|--.*)$/.exec(arg)) {
          console.error("Unrecognised option '" + match[0].replace(/'/g, "\\'") + "'");
          process.exit(1);
        } else {
          positionalArgs.push(arg);
        }
      }
      positionalArgs = positionalArgs.concat(additionalArgs);
      return [
        options,
        positionalArgs
      ];
    };
    return Jedediah;
  }();
  Jedediah.Jedediah = Jedediah;
  function in$(member, list) {
    for (var i = 0, length = list.length; i < length; ++i)
      if (i in list && list[i] === member)
        return true;
    return false;
  }
}.call(this);
